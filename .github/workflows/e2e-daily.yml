name: Daily E2E Test Report

on:
  schedule:
    - cron: "0 7 * * *"  # Daily at 2 AM ET (7 AM UTC)
  workflow_dispatch:
  push:
    branches: [main]

permissions:
  contents: write
  pull-requests: write

jobs:
  e2e-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose python3 python3-pip libxml2-utils

    - name: Verify Docker is available
      run: |
        docker --version
        docker-compose --version

    - name: Prune old Docker images (ensure fresh pulls)
      run: docker image prune -a -f || true

    - name: Pull Docker images
      run: docker-compose pull
      env:
        MONGO_INITDB_ROOT_USERNAME: ${{ secrets.MONGO_INITDB_ROOT_USERNAME }}
        MONGO_INITDB_ROOT_PASSWORD: ${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}
        RABBITMQ_DEFAULT_USER: ${{ secrets.RABBITMQ_DEFAULT_USER }}
        RABBITMQ_DEFAULT_PASS: ${{ secrets.RABBITMQ_DEFAULT_PASS }}

    - name: Start Docker Compose stack
      run: docker-compose up -d --wait
      env:
        MONGO_INITDB_ROOT_USERNAME: ${{ secrets.MONGO_INITDB_ROOT_USERNAME }}
        MONGO_INITDB_ROOT_PASSWORD: ${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}
        RABBITMQ_DEFAULT_USER: ${{ secrets.RABBITMQ_DEFAULT_USER }}
        RABBITMQ_DEFAULT_PASS: ${{ secrets.RABBITMQ_DEFAULT_PASS }}

    - name: Wait for all services to be healthy
      run: |
        TIMEOUT=180
        INTERVAL=5
        ELAPSED=0
        echo "Waiting for services to be healthy..."
        while [ $ELAPSED -lt $TIMEOUT ]; do
          UNHEALTHY=$(docker-compose ps | grep -E "unhealthy" || true)
          if [ -z "$UNHEALTHY" ]; then
            echo "All containers are healthy."
            break
          fi
          sleep $INTERVAL
          ELAPSED=$((ELAPSED + INTERVAL))
        done
        if [ $ELAPSED -ge $TIMEOUT ]; then
          echo "Some containers are still unhealthy:"
          docker-compose ps
          exit 1
        fi

    - name: Run end-to-end tests inside the end2end container
      run: |
        set +e
        docker-compose exec -T end2end python3 -m pytest tests/ --junitxml=/tmp/results.xml
        echo "Pytest exit code: $?"
        set -e

    - name: Copy results.xml from end2end container
      run: |
        mkdir -p ./e2e-output
        docker cp $(docker-compose ps -q end2end):/tmp/results.xml ./e2e-output/results.xml

    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: results
        path: ./e2e-output/results.xml

    - name: Update GitHub Project board
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: python3 update_project.py

    - name: Post Slack Summary
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        PASSED=$(xmllint --xpath "count(//testsuite/testcase[not(failure) and not(skipped)])" ./e2e-output/results.xml)
        FAILED=$(xmllint --xpath "count(//testsuite/testcase[failure])" ./e2e-output/results.xml)
        SKIPPED=$(xmllint --xpath "count(//testsuite/testcase[skipped])" ./e2e-output/results.xml)
        TOTAL=$(xmllint --xpath "count(//testsuite/testcase)" ./e2e-output/results.xml)

        TEXT="ðŸ“Š *Daily E2E Test Report*\n*Passed:* $PASSED\n*Failed:* $FAILED\n*Skipped:* $SKIPPED\n*Total:* $TOTAL"
        curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"$TEXT\"}" "$SLACK_WEBHOOK_URL"

