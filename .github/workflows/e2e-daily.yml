name: Daily E2E Test Report

on:
  schedule:
    - cron: "0 7 * * *"  # Daily at 2 AM ET (7 AM UTC)
  workflow_dispatch:
  push:
    branches: [main]

permissions:
  contents: write
  pull-requests: write

jobs:
  e2e-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose python3 python3-pip libxml2-utils

    - name: Verify Docker is available
      run: |
        docker --version
        docker-compose --version

    - name: Prune old Docker images (ensure fresh pulls)
      run: docker image prune -a -f || true

    - name: Pull Docker images
      run: docker-compose pull
      env:
        MONGO_INITDB_ROOT_USERNAME: ${{ secrets.MONGO_INITDB_ROOT_USERNAME }}
        MONGO_INITDB_ROOT_PASSWORD: ${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}
        RABBITMQ_DEFAULT_USER: ${{ secrets.RABBITMQ_DEFAULT_USER }}
        RABBITMQ_DEFAULT_PASS: ${{ secrets.RABBITMQ_DEFAULT_PASS }}

    - name: Start Docker Compose stack
      run: docker-compose up -d --remove-orphans mongo mq1 ampath sax tenet ampath-lc sax-lc tenet-lc sdx-controller mininet
      env:
        MONGO_INITDB_ROOT_USERNAME: ${{ secrets.MONGO_INITDB_ROOT_USERNAME }}
        MONGO_INITDB_ROOT_PASSWORD: ${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}
        RABBITMQ_DEFAULT_USER: ${{ secrets.RABBITMQ_DEFAULT_USER }}
        RABBITMQ_DEFAULT_PASS: ${{ secrets.RABBITMQ_DEFAULT_PASS }}

    - name: Wait for all containers to become healthy
      run: |
        echo "Waiting for containers to become healthy..."
        for i in {1..60}; do
          unhealthy=$(docker inspect --format '{{.Name}} {{.State.Health.Status}}' $(docker-compose ps -q) | grep -v healthy || true)
          if [ -z "$unhealthy" ]; then
            echo "All containers are healthy."
            break
          fi
          echo "Still waiting on: $unhealthy"
          sleep 5
        done
        echo "Docker containers (docker ps -a):"
        docker ps -a

    - name: Run end2end test container separately
      run: docker-compose run --rm end2end

    - name: Run end-to-end tests in container
      run: docker-compose exec -T end2end python3 -m pytest tests/ --junitxml=/tmp/results.xml || true

    - name: Wait for results.xml file
      run: |
        for i in {1..12}; do
          if docker exec end2end test -f /tmp/results.xml; then
            echo "Found results.xml"
            break
          fi
          echo "Waiting for results.xml... ($i/12)"
          sleep 5
        done

    - name: Copy results.xml from end2end container
      run: |
        mkdir -p ./e2e-output
        CONTAINER_ID=$(docker-compose ps -q end2end)
        if [ -z "$CONTAINER_ID" ]; then
          echo "Could not find running '$CONTAINER_ID' container"
          exit 1
        fi
        docker cp $CONTAINER_ID:/tmp/results.xml ./e2e-output/results.xml

    - name: Copy results.xml from end2end container
      run: |
        echo "Waiting for /tmp/results.xml to be created in end2end container..."
        for i in {1..12}; do
          if test -f ./e2e-output/results.xml; then
            echo "Found results.xml"
            break
          fi
          echo "Waiting... ($i/12)"
          sleep 5
        done
        if test -f ./e2e-output/results.xml; then
          echo "results.xml not found after waiting. Test may have failed."
          exit 1
        fi
        mkdir -p ./e2e-output

    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: results
        path: ./e2e-output/results.xml

    - name: Update GitHub Project board
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: python3 update_project.py

    - name: Post Slack Summary (only if failed)
      if: always()
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        PASSED=$(xmllint --xpath "count(//testsuite/testcase[not(failure) and not(skipped)])" ./e2e-output/results.xml)
        FAILED=$(xmllint --xpath "count(//testsuite/testcase[failure])" ./e2e-output/results.xml)
        SKIPPED=$(xmllint --xpath "count(//testsuite/testcase[skipped])" ./e2e-output/results.xml)
        TOTAL=$(xmllint --xpath "count(//testsuite/testcase)" ./e2e-output/results.xml)

        if [ "$FAILED" -gt 0 ]; then
          TEXT="X *E2E Test Failures Detected*\n*Passed:* $PASSED\n*Failed:* $FAILED\n*Skipped:* $SKIPPED\n*Total:* $TOTAL"
          curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"$TEXT\"}" "$SLACK_WEBHOOK_URL"
        else
          echo "No failures. Slack alert not sent."
        fi

